import java.util.Stack;

class Solution {
    public int solution(int[][] board, int[] moves) {
        int answer = 0;
        int[][] reArr = new int[board.length][board.length];

        Stack<Integer> st = new Stack<>();

        for ( int i = 0; i < board.length; i ++ ) {
            int[] tmp       = new int[board.length];
            for ( int j = 0; j < board[i].length; j ++ ) tmp[j] = board[j][i];

            reArr[i] = tmp;
        }
        for ( int k = 0; k < moves.length; k ++ ) {
            int idx = moves[k] - 1;
            for ( int l = 0; l < reArr.length; l ++ ) {
                if ( reArr[idx][l] != 0 ) {
                    if ( !st.isEmpty() ) {
                        if ( st.peek() == reArr[idx][l] ) {
                            st.pop();
                            answer ++;
                        }
                        else st.push(reArr[idx][l]);
                    } else st.push(reArr[idx][l]);
                    reArr[idx][l] = 0;
                    break;
                }
            }
        }
        return answer *= 2;
    }
}
